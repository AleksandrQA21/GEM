name: GEM Tests CI/CD

on:
#  push:
#    branches: [ "main" ]
#    paths:
#      - 'src/**'
#      - 'pom.xml'
#      - '.github/workflows/**'
#
#  pull_request:
#    branches: [ "main" ]
  
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Тип тестов'
        required: true
        type: choice
        options:
          - all
          - smoke
          - regression
          - critical-only
          - normal-only
          - minor-only
      
      feature:
        description: 'Функциональность'
        required: true
        type: choice
        options:
          - all
          - LoginFeature
          - MenuFeature
      
      story:
        description: 'Пользовательский сценарий'
        required: false
        type: choice
        options:
          - all
          - SuccessfulLogin
          - UnsuccessfulLogin
          - ValidationChecks
          - ForgotPassword
          - CheckSignUpButton
          - CheckSideMenuButtonOptions
      
      execution_mode:
        description: 'Режим выполнения'
        required: true
        type: choice
        options:
          - sequential
          - parallel
        default: 'sequential'
      
      custom_tags:
        description: 'Пользовательские теги (будут добавлены к выбранным выше)'
        required: false
        type: string

# Добавляем разрешения для GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  determine-test-matrix:
    runs-on: ubuntu-latest
    outputs:
      test_tags: ${{ steps.set-tags.outputs.test_tags }}
      run_mode: ${{ steps.set-mode.outputs.run_mode }}
    steps:
      - id: set-tags
        run: |
          # Базовый тег
          BASE_TAG=""
          
          # Настройка типа тестов
          case "${{ github.event.inputs.test_type }}" in
            smoke)
              BASE_TAG="@smoke"
              ;;
            regression)
              BASE_TAG="@regression"
              ;;
            critical-only)
              BASE_TAG="@severity=critical"
              ;;
            normal-only)
              BASE_TAG="@severity=normal"
              ;;
            minor-only)
              BASE_TAG="@severity=minor"
              ;;
            all|*)
              BASE_TAG="@regression or @smoke"
              ;;
          esac
          
          # Добавление фильтра по функциональности
          if [[ "${{ github.event.inputs.feature }}" != "all" && "${{ github.event.inputs.feature }}" != "" ]]; then
            FEATURE_TAG="@feature=${{ github.event.inputs.feature }}"
            if [[ -n "$BASE_TAG" ]]; then
              BASE_TAG="($BASE_TAG) and $FEATURE_TAG"
            else
              BASE_TAG="$FEATURE_TAG"
            fi
          fi
          
          # Добавление фильтра по пользовательскому сценарию
          if [[ "${{ github.event.inputs.story }}" != "all" && "${{ github.event.inputs.story }}" != "" ]]; then
            STORY_TAG="@story=${{ github.event.inputs.story }}"
            if [[ -n "$BASE_TAG" ]]; then
              BASE_TAG="($BASE_TAG) and $STORY_TAG"
            else
              BASE_TAG="$STORY_TAG"
            fi
          fi
          
          # Добавление пользовательских тегов
          if [[ -n "${{ github.event.inputs.custom_tags }}" ]]; then
            if [[ -n "$BASE_TAG" ]]; then
              BASE_TAG="($BASE_TAG) and (${{ github.event.inputs.custom_tags }})"
            else
              BASE_TAG="${{ github.event.inputs.custom_tags }}"
            fi
          fi
          
          # Вывод для отладки
          echo "Теги для фильтрации тестов: $BASE_TAG"
          
          # Явно указываем только feature
          if [[ "${{ github.event.inputs.feature }}" == "LoginFeature" ]]; then
            BASE_TAG="@feature=LoginFeature"
            echo "Установлены теги только для LoginFeature"
          elif [[ "${{ github.event.inputs.feature }}" == "MenuFeature" ]]; then
            BASE_TAG="@feature=MenuFeature"
            echo "Установлены теги только для MenuFeature"
          fi
          
          echo "test_tags=$BASE_TAG" >> $GITHUB_OUTPUT
          echo "Финальные теги для тестов: $BASE_TAG"
          
      - id: set-mode
        run: |
          # Если запуск не из workflow_dispatch или параметр не указан, использовать sequential
          if [[ "${{ github.event_name }}" != "workflow_dispatch" || "${{ github.event.inputs.execution_mode }}" == "" ]]; then
            echo "run_mode=sequential" >> $GITHUB_OUTPUT
          else
            echo "run_mode=${{ github.event.inputs.execution_mode }}" >> $GITHUB_OUTPUT
          fi

  test-sequential:
    needs: determine-test-matrix
    if: needs.determine-test-matrix.outputs.run_mode == 'sequential'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Важно для корректной работы с историей

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Install Chrome
        run: |
          wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google.list
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable

      - name: Set up display
        run: |
          export DISPLAY=:99
          Xvfb :99 -screen 0 1280x1024x24 > /dev/null 2>&1 &
          
      - name: Clear previous Allure results
        run: |
          mkdir -p target/allure-results
          rm -rf target/allure-results/* || true
          echo "Предыдущие результаты Allure очищены"

      - name: Run Tests
        run: |
          if [[ -n "${{ needs.determine-test-matrix.outputs.test_tags }}" ]]; then
            echo "Запуск тестов с тегами: ${{ needs.determine-test-matrix.outputs.test_tags }}"
            # Экранируем кавычки для правильной передачи в Maven
            TAGS="${{ needs.determine-test-matrix.outputs.test_tags }}"
            # Заменяем кавычки на экранированные кавычки для Maven
            TAGS="${TAGS//\"/\\\"}"
            mvn clean test -Dselenide.headless=true -Dcucumber.filter.tags="$TAGS"
          else
            mvn clean test -Dselenide.headless=true
          fi

      - name: Get Allure history
        uses: actions/checkout@v3
        if: always()
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages

      - name: Generate Allure Report
        uses: simple-elf/allure-report-action@master
        if: always()
        with:
          allure_results: target/allure-results
          allure_history: allure-history
          keep_reports: 20


      - name: Deploy report to GitHub Pages
        if: always()
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: ./allure-history

  test-parallel:
    needs: determine-test-matrix
    if: needs.determine-test-matrix.outputs.run_mode == 'parallel'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        feature: [LoginFeature, MenuFeature]
        include:
          - feature: LoginFeature
            display-name: "Login Tests"
          - feature: MenuFeature
            display-name: "Menu Tests"
      fail-fast: false
      max-parallel: 1
    
    name: ${{ matrix.display-name }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Важно для корректной работы с историей

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Install Chrome
        run: |
          wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google.list
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable

      - name: Set up display
        run: |
          export DISPLAY=:99
          Xvfb :99 -screen 0 1280x1024x24 > /dev/null 2>&1 &
          
      - name: Clear previous Allure results
        run: |
          mkdir -p target/allure-results
          rm -rf target/allure-results/* || true
          echo "Предыдущие результаты Allure очищены для ${{ matrix.feature }}"

      - name: Prepare test tags
        id: prepare-tags
        run: |
          # Простой подход - используем только тег feature
          FINAL_TAGS="@feature=${{ matrix.feature }}"
          echo "final_tags=$FINAL_TAGS" >> $GITHUB_ENV
          echo "Итоговые теги для запуска: $FINAL_TAGS"

      - name: Run Cucumber tests for ${{ matrix.feature }}
        run: |
          echo "Запуск тестов с тегами: ${{ env.final_tags }}"
          # Экранируем кавычки для правильной передачи в Maven
          TAGS="${{ env.final_tags }}"
          # Заменяем кавычки на экранированные кавычки для Maven
          TAGS="${TAGS//\"/\\\"}"
          mvn clean test -Dselenide.headless=true -Dcucumber.filter.tags="$TAGS"

      # Сохраняем результаты тестов в хранилище GitHub Pages напрямую
      # Вместо использования artifacts
      - name: Save test results to GitHub Pages
        if: always()
        run: |
          mkdir -p allure-history/${{ matrix.feature }}
          
          # Создаем отчет Allure напрямую с помощью allure command line
          echo "Формирование отчета Allure для ${{ matrix.feature }}"
          
          # Генерируем временный отчет для текущих результатов
          mkdir -p temp-report
          
          # Сохраняем результаты тестов в директорию результатов
          echo "Сохранение результатов тестов для ${{ matrix.feature }}"
          mkdir -p test-results/${{ matrix.feature }}
          cp -r target/allure-results/* test-results/${{ matrix.feature }}/ || true
          
      # Сохраняем данные в кэше GitHub Actions вместо артефактов
      - name: Cache test results
        uses: actions/cache@v3
        with:
          path: test-results
          key: test-results-${{ matrix.feature }}-${{ github.run_id }}

  merge-reports:
    needs: test-parallel
    if: always() && needs.determine-test-matrix.outputs.run_mode == 'parallel'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      # Используем кэш вместо артефактов
      - name: Restore cached test results
        uses: actions/cache@v3
        with:
          path: test-results
          key: test-results-LoginFeature-${{ github.run_id }}
          restore-keys: |
            test-results-LoginFeature-

      - name: Restore Menu test results
        uses: actions/cache@v3
        with:
          path: test-results
          key: test-results-MenuFeature-${{ github.run_id }}
          restore-keys: |
            test-results-MenuFeature-
      
      - name: Get Allure history
        uses: actions/checkout@v3
        if: always()
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages
      
      # Создаем директорию для результатов и копируем из кэша
      - name: Prepare results directory
        run: |
          mkdir -p combined-results
          echo "Copying test results to combined directory"
          find test-results -type f -exec cp {} combined-results/ \; || true
          ls -la combined-results/ || true
      
      # Устанавливаем Allure CLI для обработки отчетов
      - name: Install Allure CLI
        run: |
          curl -o allure-2.13.8.tgz -Ls https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/2.13.8/allure-commandline-2.13.8.tgz
          tar -zxvf allure-2.13.8.tgz -C .
          ./allure-2.13.8/bin/allure --version
      
      # Генерируем отчет с помощью CLI
      - name: Generate Allure report
        run: |
          mkdir -p allure-report
          ./allure-2.13.8/bin/allure generate combined-results -o allure-report --clean
      
      # Публикуем отчет
      - name: Publish to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: always()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: ./allure-report
